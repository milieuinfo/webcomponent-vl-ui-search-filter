/**
 * Range
 */

const raClass = `.js-${vl.ns}range`;
const raFromClass = `${raClass}__from`;
const raToClass = `${raClass}__to`;
const raSliderClass = `${raClass}__slider`;
const raSliderRangeClass = `${raClass}__slider-range`;
const raHandleFromClass = `${raFromClass}-handle`;
const raHandleToClass = `${raToClass}-handle`;
const raLabelFromClass = `${raFromClass}-input`;
const raLabelToClass = `${raToClass}-input`;

class RangeSlider {
  constructor(element) {
    this.el = element;
    this.sliderEl = this.el.querySelector(raSliderClass);
    this.sliderRange = this.el.querySelector(raSliderRangeClass);
    this.minInputValueEl = this.el.querySelector(raLabelFromClass);
    this.maxInputValueEl = this.el.querySelector(raLabelToClass);
    this.minHandleEl = this.el.querySelector(raHandleFromClass);
    this.maxHandleEl = this.el.querySelector(raHandleToClass);
    this.minPos = 0;
    this.maxPos = 0;
    this.valueNow = 50;
    this.railMin = 0;
    this.railMax = 100;
    this.railWidth = 0;
    this.railBorderWidth = 0;
    this.thumbWidth = 15;
    this.keyCode = Object.freeze({
      'left': 37,
      'up': 38,
      'right': 39,
      'down': 40,
      'pageUp': 33,
      'pageDown': 34,
      'end': 35,
      'home': 36
    });
  }

  handleKeyDown(event) {
    let self = this,
      flag = false,
      currentHandleEl = event.target;

    self.valueNow = parseInt(currentHandleEl.getAttribute('aria-valuenow'), 10);

    switch (event.keyCode) {
      case this.keyCode.left:
      case this.keyCode.down:
        this.moveSliderTo(currentHandleEl, this.valueNow - 1);
        flag = true;
        break;

      case this.keyCode.right:
      case this.keyCode.up:
        this.moveSliderTo(currentHandleEl, this.valueNow + 1);
        flag = true;
        break;

      case this.keyCode.pageDown:
        this.moveSliderTo(currentHandleEl, this.valueNow - 10);
        flag = true;
        break;

      case this.keyCode.pageUp:
        this.moveSliderTo(currentHandleEl, this.valueNow + 10);
        flag = true;
        break;

      case this.keyCode.home:
        this.moveSliderTo(currentHandleEl, this.railMin);
        flag = true;
        break;

      case this.keyCode.end:
        this.moveSliderTo(currentHandleEl, this.railMax);
        flag = true;
        break;

      default:
        break;
    }

    if (flag) {
      event.preventDefault();
      event.stopPropagation();
    }
  }

  handleMouseDown(event){
    let self = this,
      currentHandleEl = event.target;

    const handleMouseMove = (event) => {
      let diffX = event.pageX - self.sliderEl.getBoundingClientRect().left;

      self.valueNow = self.railMin + parseInt((self.railMax - self.railMin) * diffX / self.railWidth, 10);
      self.moveSliderTo(currentHandleEl, self.valueNow);

      event.preventDefault();
      event.stopPropagation();
    };

    const handleMouseUp = () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.removeEventListener('touchmove', handleMouseMove);
      document.removeEventListener('touchend', handleMouseUp);
    };

    // bind a mousemove event handler to move pointer
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('touchmove', handleMouseMove);

    // bind a mouseup event handler to stop tracking mouse movements
    document.addEventListener('mouseup', handleMouseUp);
    document.addEventListener('touchend', handleMouseUp);

    event.preventDefault();
    event.stopPropagation();

    // Set focus to the clicked handle
    currentHandleEl.focus();
  }

  moveSliderTo(handleEl, value) {
    let valueMax = parseInt(handleEl.getAttribute('aria-valuemax'), 10),
      valueMin = parseInt(handleEl.getAttribute('aria-valuemin'), 10),
      pos,
      rangeWidthPerc,
      rangeLeftPosPerc;

    if (value > valueMax) {
      value = valueMax;
    }

    if (value < valueMin) {
      value = valueMin;
    }

    this.valueNow = Number(value);
    this.valueNowText = value;

    handleEl.setAttribute('aria-valuenow', this.valueNow);
    handleEl.setAttribute('aria-valuetext', this.valueNowText);

    if (handleEl === this.minHandleEl) {
      this.minInputValueEl.value = this.valueNow.toString();
    }

    if (handleEl === this.maxHandleEl) {
      this.maxInputValueEl.value = this.valueNow.toString();
    }

    pos = Math.round((this.valueNow - this.railMin) * (this.railWidth - 2 * (this.thumbWidth - this.railBorderWidth)) / this.railMax - this.railMin);

    if (handleEl === this.minHandleEl) {
      this.minPos = pos;
      this.maxHandleEl.setAttribute('aria-valuemin', this.valueNow);
      handleEl.style.transform = `translateX(${pos - this.railBorderWidth + 'px'})`;
    } else {
      this.maxPos = pos;
      this.minHandleEl.setAttribute('aria-valuemax', this.valueNow);
      handleEl.style.transform = `translateX(${pos + this.thumbWidth - this.railBorderWidth + 'px'})`;
    }

    rangeWidthPerc = (this.maxPos - this.minPos) / this.railWidth * 100;

    this.sliderRange.style.width = `${rangeWidthPerc + '%'}`;
    rangeLeftPosPerc = (this.minPos + this.thumbWidth) / this.railWidth * 100;
    this.sliderRange.style.left = `${rangeLeftPosPerc + '%'}`;
  }

  handleResize() {
    this.railWidth = parseInt(window.getComputedStyle(this.sliderEl).width, 10);
    this.moveSliderTo(this.minHandleEl, this.minInputValueEl.value);
    this.moveSliderTo(this.maxHandleEl, this.maxInputValueEl.value);
  }

  dress() {
    this.railMin = parseInt(this.minHandleEl.getAttribute('aria-valuemin'), 10);
    this.railMax = parseInt(this.maxHandleEl.getAttribute('aria-valuemax'), 10);
    this.railWidth = parseInt(window.getComputedStyle(this.sliderEl).width, 10);

    this.minHandleEl.addEventListener('keydown', this.handleKeyDown.bind(this));
    this.minHandleEl.addEventListener('mousedown', this.handleMouseDown.bind(this));
    this.minHandleEl.addEventListener('touchstart', this.handleMouseDown.bind(this));
    this.minInputValueEl.addEventListener('change', () => {
      this.moveSliderTo(this.minHandleEl, this.minInputValueEl.value);
    });

    this.maxHandleEl.addEventListener('keydown', this.handleKeyDown.bind(this));
    this.maxHandleEl.addEventListener('mousedown', this.handleMouseDown.bind(this));
    this.maxHandleEl.addEventListener('touchstart', this.handleMouseDown.bind(this));
    this.maxInputValueEl.addEventListener('change', () => {
      this.moveSliderTo(this.maxHandleEl, this.maxInputValueEl.value);
    });

    window.addEventListener('resize', this.handleResize.bind(this));

    this.moveSliderTo(this.minHandleEl, this.minInputValueEl.value);
    this.moveSliderTo(this.maxHandleEl, this.maxInputValueEl.value);
  }
}

export default RangeSlider;
